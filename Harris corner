using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using Emgu.CV;

using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV.Util;

namespace ConsoleApp8
{
    
        class Program
        {

            static void Main(string[] args)
            {
            Image<Gray, float> img = new Image<Gray, float>(@"C:\Users\iP\Desktop\po\shapes2.bmp");

            Image<Bgr, byte> res = img.Convert<Bgr, byte>();


            Image<Gray,float> ix = img.Sobel(1, 0, 3);
            Image<Gray, float> iy = img.Sobel(0, 1, 3);
            Image<Gray, float> ixy = ix.Mul(iy);


            Image<Gray, float> ix2 = ix.Mul(ix).SmoothGaussian(15);
            Image<Gray, float> iy2 = iy.Mul(iy).SmoothGaussian(15);
            ixy = ixy.SmoothGaussian(15);


            Image<Gray, float> det = (ix2.Mul(iy2) - ixy.Mul(ixy));
            Image<Gray, float> trace = ix2.Add(iy2);

            Image<Gray, float> r = det.Mul(trace.Pow(-1));

            CvInvoke.Normalize(r, r, 0, 300, NormType.MinMax);


            Image<Gray, float> dilate = r.Dilate(1);

            for(int x=0;x<dilate.Cols;x++)
            {
                for (int y = 0; y < dilate.Rows; y++)
                {
                    if(r[y,x].Intensity == dilate[y,x].Intensity && dilate[y, x].Intensity > 10)
                    {
                        CvInvoke.Circle(res, new Point(x, y), 4, new MCvScalar(0, 0, 255),3);
                    }
                }
            }

            CvInvoke.Imshow("img", img.Convert<Gray,byte>());


            CvInvoke.Imshow("res", res);

            CvInvoke.WaitKey(0);

        }
    }
    }

